/*********************************************************
 * 与数字相关的题目
 * 简单的解法不在使用Solution类，直接使用一个函数实现即可
 * 所有的函数依旧包含在命名空间leetCode中
 * *******************************************************/

#ifndef __LEET_CODE_NUMBER_H__
#define __LEET_CODE_NUMBER_H__

#include <vector>

namespace leetCode
{
    /************************************************************************
     * 给定一个 32 位的有符号整数 x ，返回将 x 中的数字部分反转后的结果。
     * 如果反转后整数超过 32 位的有符号整数的范围 [−2^31,  2^31 − 1] ，就返回 0
     ********************************************************************/
    int reverse(int num);

    /********************************************************************
     * 返回所有长度为 n 且满足其每两个连续位上的数字之间的差的绝对值为 k 的 
     * 非负整数
     * 请注意，除了 数字 0 本身之外，答案中的每个数字都 不能 
     * 有一个前导零，所以是无效的；但 0 是有效的。
     * ******************************************************************/
    std::vector<int> numSameConsecDiff(int n, int k);   

    /************************************************************
     * 给定一个正整数 n，返回 连续正整数满足所有数字之和为 n 的组数 
     * *********************************************************/
    int consecutiveNumbersSum(int n); 
} // namespace leetCode

#endif
